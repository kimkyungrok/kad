<% layout('layout') %>

<!-- 작성일(프로모션 선택) 입력 -->
<div class="container my-4">
  <form id="checkForm" class="row g-2 align-items-center">
    <div class="col-auto">
      <label for="promoSelect" class="form-label">프로모션 선택:</label>
    </div>
    <div class="col-auto">
      <select id="promoSelect" class="form-select" required>
        <option value="" disabled selected>-- 프로모션을 선택하세요 --</option>
        <% promos.forEach((promo, idx) => { %>
          <option value="<%= idx %>">
            <%= new Date(promo.createdAt).toISOString().slice(0,10) %> — <%= promo.title %>
          </option>
        <% }) %>
      </select>
    </div>
    <div class="col-auto">
      <button type="submit" class="btn btn-primary">확인</button>
      <button id="savePromoResult" type="button" class="btn btn-success">프로모션 결과 공지</button>
    </div>
  </form>
</div>

<!-- 정산 테이블 -->
<table class="table table-bordered">
  <thead>
    <tr>
      <th>이름</th>
      <th>정산 금액</th>
      <th>등수</th>
      <th>지급액</th>
    </tr>
  </thead>
  <tbody id="riderTableBody">
    <% riderData.forEach(item => { %>
      <tr data-rank="<%= item.rank %>">
        <td><%= item.name %></td>
        <td><%= item.value.toLocaleString() %></td>
        <td><%= item.rank || '-' %></td>
        <td class="payCell">0</td>
      </tr>
    <% }) %>
  </tbody>
</table>

<script>
  // 서버에서 주입된 promos 배열
  const promos = <%- JSON.stringify(promos || []) %>;

  // “확인” 버튼: 선택된 프로모션의 지급액을 테이블에 채웁니다.
  document.getElementById('checkForm').addEventListener('submit', function(e) {
    e.preventDefault();
    const sel = document.getElementById('promoSelect').value;
    if (!sel) {
      return alert('프로모션을 선택해주세요.');
    }
    const matchedPromo = promos[parseInt(sel)];
    if (!matchedPromo || !matchedPromo.content) {
      return alert('선택된 프로모션 데이터가 없습니다.');
    }

    // content가 문자열로 저장됐다면 JSON으로 파싱
    let promoTable = matchedPromo.content;
    if (typeof promoTable === 'string') {
      try {
        promoTable = JSON.parse(promoTable);
      } catch {
        return alert('프로모션 데이터 파싱 오류');
      }
    }

    // 각 행의 data-rank와 비교하여 payCell에 지급액 입력
    document.querySelectorAll('#riderTableBody tr').forEach(row => {
      const rankLabel = row.getAttribute('data-rank'); // e.g. "1등"
      let amount = '0';
      Object.values(promoTable).forEach(r => {
        const [label, value] = Object.values(r);
        if ((label||'').trim() === rankLabel) {
          amount = value;
        }
      });
      row.querySelector('.payCell').innerText = amount;
    });
  });

  // “프로모션 결과 공지” 버튼: 테이블 데이터를 서버로 전송
  document.getElementById('savePromoResult').addEventListener('click', () => {
    const sel = document.getElementById('promoSelect').value;
    if (!sel) {
      return alert('먼저 프로모션을 확인해주세요.');
    }
    const rows = Array.from(document.querySelectorAll('#riderTableBody tr')).map(r => ({
      name:  r.cells[0].innerText,
      value: r.cells[1].innerText,
      rank:  r.cells[2].innerText,
      pay:   r.querySelector('.payCell').innerText
    }));
    const createdAt = promos[parseInt(sel)].createdAt;

    fetch('/save-promo-result', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ date: createdAt, data: rows })
    })
    .then(res => res.json())
    .then(json => {
      alert(json.message || '저장 완료');
      location.href = '/my-promoPage';
    })
    .catch(err => {
      console.error(err);
      alert('서버 오류: 저장에 실패했습니다.');
    });
  });
</script>
